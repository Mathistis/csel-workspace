\BOOKMARK [0][-]{chapter.1}{TP Syst\350mes de fichiers}{}% 1
\BOOKMARK [1][-]{section.1.1}{R\351sum\351 du travail pratique}{chapter.1}% 2
\BOOKMARK [1][-]{section.1.2}{Infos utiles \340 retenir}{chapter.1}% 3
\BOOKMARK [1][-]{section.1.3}{Feedback global}{chapter.1}% 4
\BOOKMARK [0][-]{chapter.2}{TP 5 - Ordonnanceur}{}% 5
\BOOKMARK [1][-]{section.2.1}{R\351sum\351 du laboratoire}{chapter.2}% 6
\BOOKMARK [1][-]{section.2.2}{R\351ponses aux questions}{chapter.2}% 7
\BOOKMARK [2][-]{subsection.2.2.1}{Quel effet a la commande echo \044\044 > ... sur les cgroups ?}{section.2.2}% 8
\BOOKMARK [2][-]{subsection.2.2.2}{Quel est le comportement du sous-syst\350me memory lorsque le quota de m\351moire est \351puis\351 ? Pourrait-on le modifier ? Si oui, comment ?}{section.2.2}% 9
\BOOKMARK [2][-]{subsection.2.2.3}{Est-il possible de surveiller/v\351rifier l\220\351tat actuel de la m\351moire ? Si oui, comment ?}{section.2.2}% 10
\BOOKMARK [2][-]{subsection.2.2.4}{Les 4 derni\350res lignes sont obligatoires pour que les prochaines commandes fonctionnent correctement. Pouvez-vous en donner la raison ?}{section.2.2}% 11
\BOOKMARK [2][-]{subsection.2.2.5}{Comportement des shells dans deux cgroups diff\351rents}{section.2.2}% 12
\BOOKMARK [2][-]{subsection.2.2.6}{Sachant que l\220attribut cpu.shares permet de r\351partir le temps CPU entre diff\351rents cgroups, comment devrait-on proc\351der pour lancer deux t\342ches distinctes sur le c\234ur 4 de notre processeur et attribuer 75\045 du temps CPU \340 la premi\350re t\342che et 25\045 \340 la deuxi\350me ?}{section.2.2}% 13
\BOOKMARK [1][-]{section.2.3}{Synth\350se des connaissances acquises}{chapter.2}% 14
\BOOKMARK [2][-]{subsection.2.3.1}{Non acquis}{section.2.3}% 15
\BOOKMARK [2][-]{subsection.2.3.2}{Acquis, mais \340 exercer}{section.2.3}% 16
\BOOKMARK [2][-]{subsection.2.3.3}{Parfaitement acquis}{section.2.3}% 17
\BOOKMARK [1][-]{section.2.4}{Infos utiles \340 retenir}{chapter.2}% 18
\BOOKMARK [1][-]{section.2.5}{Feedback exercices}{chapter.2}% 19
\BOOKMARK [2][-]{subsection.2.5.1}{Exercice 1}{section.2.5}% 20
\BOOKMARK [2][-]{subsection.2.5.2}{Exercice 2}{section.2.5}% 21
\BOOKMARK [2][-]{subsection.2.5.3}{Exercice 3}{section.2.5}% 22
\BOOKMARK [0][-]{chapter.3}{TP 6 - Optimisation}{}% 23
\BOOKMARK [1][-]{section.3.1}{R\351sum\351 du laboratoire}{chapter.3}% 24
\BOOKMARK [1][-]{section.3.2}{R\351ponses aux questions}{chapter.3}% 25
\BOOKMARK [2][-]{subsection.3.2.1}{Exercice 1 - Ce programme contient une erreur triviale qui emp\352che une utilisation optimale du cache. De quelle erreur s\220agit-il ?}{section.3.2}% 26
\BOOKMARK [2][-]{subsection.3.2.2}{Exercice 1 - Relevez les valeurs du compteur L1-dcache-load-misses pour les deux versions de l\220application. Quel facteur constatez-vous entre les deux valeurs ?}{section.3.2}% 27
\BOOKMARK [2][-]{subsection.3.2.3}{Mesure de l'impact de perf sur la performance du programme}{section.3.2}% 28
\BOOKMARK [1][-]{section.3.3}{Synth\350se des exercices}{chapter.3}% 29
\BOOKMARK [2][-]{subsection.3.3.1}{Exercice 1}{section.3.3}% 30
\BOOKMARK [1][-]{section.3.4}{Synth\350se des connaissances acquises}{chapter.3}% 31
\BOOKMARK [2][-]{subsection.3.4.1}{Non acquis}{section.3.4}% 32
\BOOKMARK [2][-]{subsection.3.4.2}{Acquis, mais \340 exercer}{section.3.4}% 33
\BOOKMARK [2][-]{subsection.3.4.3}{Parfaitement acquis}{section.3.4}% 34
\BOOKMARK [1][-]{section.3.5}{Feedback}{chapter.3}% 35
